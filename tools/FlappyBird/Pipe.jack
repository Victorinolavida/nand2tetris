

class Pipe{
    field int point1x,point1y, point2x,point2y;
    field bool dissable,middleWay;

    constructor Pipe new(int x1, int y1, int x2, int y2 ){
        let point1x = x1;
        let point1y = y1;
        let point2x = x2;
        let point2y = y2;
        let dissable = true;
        return this;
    }

    method void draw(){
        do Screen.setColor(1);

        do Screen.drawRectangle(point1x,point1y,point2x,point2y);
        return;
    }

    method void clean(){
        do Screen.setColor(0);
        do Screen.drawRectangle(point1x,point1y,point2x,point2y);
        return;
    }

    method void move(){
        if((point1x < 0) | (point1x = 0)){
            let dissable = false;
            do clean();
            return;
        }
        do clean();
        let point1x = point1x - 5;
        let point2x = point2x - 5;
        do draw();

        do Sys.wait(25);
        return;
    }

    method bool collision(Bird bird){
        var bool conditionX,conditionY;
        let conditionX = collisionX(bird);
        let conditionY = collisionY(bird);
        return (conditionX & conditionY);
    }
    method int getLength(){
        var int length;
        let length = point1x - point2x;
        if(length<0){
            return -length;
        }else{
            return length;
        }
    }

    method bool collisionX(Bird bird){
        var bool condition1,condition2;
        var int birdX,width;
        let width = getLength();

        let birdX = bird.getCurrentColumn();

        let condition1 = (point1x+width) > birdX;
        let condition2 = point1x < (birdX+20);

        return (condition1 & condition2);
    }
    method bool collisionY(Bird bird){
        var bool condition1,condition2;
        var int birdY;

        let birdY = bird.getCurrentRow();
        let condition1 = (point1y+getWidth()) > birdY;
        let condition2 = point1y < ( birdY+20 );

        return (condition1 & condition2);
    }

    method int getWidth(){
        var int width;
        let width = point1y - point2y;
        if(width<0){
            return -width;
        }else{
            return width;
    }
    }
    method int getX(){
        return point1x;
    }

    method bool isDissable(){return dissable;}

    method void setDissable(Bool disable){
        let point1x = 0;
        do clean();
        let dissable = disable;
        return;
    }
}