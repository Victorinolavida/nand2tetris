// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // register A Mux
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=inRegisterA);

    //ARegister
    //selecting when load 
    Mux(a=true,b=instruction[5],sel=instruction[15],out=loadByInstruction);
    ARegister(in=inRegisterA,load=loadByInstruction,out=outARegister);
    //addressM
    Or16(a=false,b=outARegister,out[0..14]=addressM);

    //second Mux
    And(a=instruction[15],b=instruction[12],out=selMux);
    Mux16(a=outARegister,b=inM,sel=selMux,out=outMux);

    //DRegister
    And(a=instruction[15],b=instruction[4],out=loadDRegister);
    DRegister(in=ALUout,load=loadDRegister,out=outDRegister);

    //ALU
    //isC

    And(a = instruction[15], b = instruction[11], out = zx);
    And(a = instruction[15], b = instruction[10], out = nx);
    And(a = instruction[15], b = instruction[9], out = zy);
    And(a = instruction[15], b = instruction[8], out = ny);
    And(a = instruction[15], b = instruction[7], out = f);
    And(a = instruction[15], b = instruction[6], out = nop);


    ALU(x=outDRegister ,y=outMux ,zx=zx ,nx=nx ,zy=zy ,ny=ny ,f=f,no=nop ,out=ALUout ,zr=zr ,ng=ng );
    Or16(a=false,b=ALUout,out=outM);

    //writeM
    Mux(a=false,b=instruction[3],sel=instruction[15],out=writeM);

    //PC
    //is intruccion C
    And(a = instruction[15], b = instruction[0], out = isGT);
    And(a = instruction[15], b = instruction[1], out = isEQ);
    And(a = instruction[15], b = instruction[2], out = isLT);

    //comparing ALU outs and defining is a jump
    And(a = ng, b = isLT, out = isLtJump);
    And(a = zr, b = isEQ, out = isEqJump);


    Not(in = ng, out = notNg);
    Not(in = zr, out = notZr);
    And(a = notNg, b = notZr, out = isOutGt);
    
    And(a = isOutGt, b = isGT, out = isGtJump);

    Or(a = isLtJump, b = isEqJump, out = isJump);
    Or(a = isJump, b = isGtJump, out = jump);

    PC(in = outARegister, load = jump, inc = true, reset = reset, out[0..14] = pc);

}